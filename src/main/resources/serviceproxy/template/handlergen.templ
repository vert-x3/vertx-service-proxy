/*\n
* Copyright 2014 Red Hat, Inc.\n
*\n
* Red Hat licenses this file to you under the Apache License, version 2.0\n
* (the "License"); you may not use this file except in compliance with the\n
* License. You may obtain a copy of the License at:\n
*\n
* http://www.apache.org/licenses/LICENSE-2.0\n
*\n
* Unless required by applicable law or agreed to in writing, software\n
* distributed under the License is distributed on an "AS IS" BASIS, WITHOUT\n
* WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n
* License for the specific language governing permissions and limitations\n
* under the License.\n
*/\n\n
package @{ifacePackageName};\n
\n
import @{ifaceFQCN};\n
import io.vertx.core.Vertx;\n
import io.vertx.core.Handler;\n
import io.vertx.core.AsyncResult;\n
import io.vertx.core.eventbus.Message;\n
import io.vertx.core.eventbus.DeliveryOptions;\n
import io.vertx.core.eventbus.ReplyException;\n
import io.vertx.core.json.JsonObject;\n
import io.vertx.core.json.JsonArray;\n
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.UUID;
import java.util.stream.Collectors;\n
import io.vertx.serviceproxy.ProxyHelper;\n
import io.vertx.serviceproxy.ProxyHandler;\n
@foreach{importedType:importedTypes}
	@if{!importedType.packageName.equals("java.lang")}
		import @{importedType};\n
	@end{}
@end{}
\n
/*\n
  Generated Proxy code - DO NOT EDIT\n
  @author Roger the Robot\n
*/\n
public class @{ifaceSimpleName}VertxProxyHandler extends ProxyHandler {\n
\n
  private final Vertx vertx;\n
  private final @{ifaceSimpleName} service;\n
  private final String address;\n
  private final long timerID;\n
  private long lastAccessed;\n
  private final long timeoutSeconds;\n
\n
  public @{ifaceSimpleName}VertxProxyHandler(Vertx vertx, @{ifaceSimpleName} service, String address, boolean topLevel, long timeoutSeconds) {\n
    this.vertx = vertx;\n
    this.service = service;\n
    this.address = address;\n
    this.timeoutSeconds = timeoutSeconds;\n
    if (timeoutSeconds != -1 && !topLevel) {\n
      long period = timeoutSeconds * 1000 / 2;\n
      if (period > 10000) {\n
        period = 10000;\n
      }\n
      this.timerID = vertx.setPeriodic(period, this::checkTimedOut);\n
    } else {\n
      this.timerID = -1;\n
    }\n
    accessed();\n
  }\n
\n
  private void checkTimedOut(long id) {\n
    long now = System.nanoTime();\n
    if (now - lastAccessed > timeoutSeconds * 1000000000) {\n
@foreach{method:methods}
	@if{method.proxyClose}
		@if{method.params.empty}
      service.@{method.name}();\n
		@else{}
      service.@{method.name}(done -> {});\n
		@end{}
	@end{}
@end{}
      close();\n
    }\n
  }\n
\n
  @Override\n
  public void close() {\n
    if (timerID != -1) {\n
      vertx.cancelTimer(timerID);\n
    }\n
    super.close();\n
  }\n
\n
  private void accessed() {\n
    this.lastAccessed = System.nanoTime();\n
  }\n
\n
  public void handle(Message<JsonObject> msg) {\n
    JsonObject json = msg.body();\n
    String action = msg.headers().get("action");\n
    if (action == null) {\n
      throw new IllegalStateException("action not specified");\n
    }\n
    accessed();\n
    switch (action) {\n
@foreach{method:methods}
	@if{!method.staticMethod}
      case "@{method.name}": {\n
        service.@{method.name}(
		@code{hasParams = !method.params.isEmpty()}
		@code{lastParam = hasParams? method.params.get(method.params.size() - 1) : null}
		@code{hasResultHandler=(lastParam != null) && (lastParam.type.kind == CLASS_HANDLER) && (lastParam.type.args[0].kind==CLASS_ASYNC_RESULT)}
		@code{count=0}
		@foreach{param: method.params}
			@if{!hasResultHandler || (count++ != method.params.size() - 1)}
				@if{param.type.name == 'char' || param.type.name == 'java.lang.Character'}
json.getInteger("@{param.name}") == null ? null : (char)(json.getInteger("@{param.name}").intValue())
				@else{param.type.kind == CLASS_ENUM}
json.getString("@{param.name}") == null ? null : @{param.type.name}.valueOf(json.getString("@{param.name}"))
				@else{param.type.kind == CLASS_LIST}
					@if{param.type.args[0].kind == CLASS_DATA_OBJECT}
json.getJsonArray("@{param.name}").stream().map(o -> new @{param.type.args[0].simpleName}((JsonObject)o)).collect(Collectors.toList())
					@else{}		
convertList(json.getJsonArray("@{param.name}").getList())
					@end{}
				@else{param.type.kind == CLASS_SET}
					@if{param.type.args[0].kind == CLASS_DATA_OBJECT}
json.getJsonArray("@{param.name}").stream().map(o -> new @{param.type.args[0].simpleName}((JsonObject)o)).collect(Collectors.toSet())
					@else{}		
convertSet(json.getJsonArray("@{param.name}").getList())
					@end{}
				@else{param.type.kind == CLASS_MAP}
convertMap(json.getJsonObject("@{param.name}").getMap())
				@else{param.type.kind == CLASS_DATA_OBJECT}
json.getJsonObject("@{param.name}") == null ? null : new @{param.type.name}(json.getJsonObject("@{param.name}"))
				@else{}
(@{param.type.name})json.getValue("@{param.name}")
				@end{}
			@else{hasResultHandler && lastParam.type.args[0].args[0].kind==CLASS_LIST && lastParam.type.args[0].args[0].args[0].name=='java.lang.Character'}
createListCharHandler(msg)
			@else{hasResultHandler && lastParam.type.args[0].args[0].kind==CLASS_LIST && lastParam.type.args[0].args[0].args[0].kind==CLASS_DATA_OBJECT}
res -> {\n
          if (res.failed()) {\n
            msg.fail(-1, res.cause().getMessage());\n
          } else {\n
            msg.reply(new JsonArray(res.result().stream().map(d -> d.toJson()).collect(Collectors.toList())));\n
          }\n
       }
			@else{hasResultHandler && lastParam.type.args[0].args[0].kind==CLASS_LIST}
createListHandler(msg)
			@else{hasResultHandler && lastParam.type.args[0].args[0].kind==CLASS_SET && lastParam.type.args[0].args[0].args[0].name=='java.lang.Character'}
createSetCharHandler(msg)
			@else{hasResultHandler && lastParam.type.args[0].args[0].kind==CLASS_SET && lastParam.type.args[0].args[0].args[0].kind==CLASS_DATA_OBJECT}
res -> {\n
          if (res.failed()) {\n
            msg.fail(-1, res.cause().getMessage());\n
          } else {\n
            msg.reply(new JsonArray(res.result().stream().map(d -> d.toJson()).collect(Collectors.toList())));\n
          }\n
       }
			@else{hasResultHandler && lastParam.type.args[0].args[0].kind==CLASS_SET}
createSetHandler(msg)
			@else{hasResultHandler && lastParam.type.args[0].args[0].kind==CLASS_DATA_OBJECT}
res -> {\n
          if (res.failed()) {\n
            msg.fail(-1, res.cause().getMessage());\n
          } else {\n
            msg.reply(res.result() == null ? null : res.result().toJson());\n
          }\n
       }
			@else{hasResultHandler && lastParam.type.args[0].args[0].kind==CLASS_API && lastParam.type.args[0].args[0].proxyGen}
res -> {\n
          if (res.failed()) {\n
            msg.fail(-1, res.cause().getMessage());\n
          } else {\n
            String proxyAddress = UUID.randomUUID().toString();\n
            ProxyHelper.registerService(@{lastParam.type.args[0].args[0].simpleName}.class, vertx, res.result(), proxyAddress, false, timeoutSeconds);\n
            msg.reply(null, new DeliveryOptions().addHeader("proxyaddr", proxyAddress));\n
          }\n
        }
			@else{}
createHandler(msg)
			@end{}
		@end{", "});\n
		@if{method.proxyClose}
        close();\n
		@end{}
        break;\n
      }
	@end{}
\n
@end{}
      default: {\n
        throw new IllegalStateException("Invalid action: " + action);\n
      }\n
    }\n

  }\n

  private <T> Handler<AsyncResult<T>> createHandler(Message msg) {\n
    return res -> {\n
      if (res.failed()) {\n
        msg.fail(-1, res.cause().getMessage());\n
      } else {\n
        msg.reply(res.result());\n
      }\n
    };\n
  }\n

  private <T> Handler<AsyncResult<List<T>>> createListHandler(Message msg) {\n
    return res -> {\n
      if (res.failed()) {\n
        msg.fail(-1, res.cause().getMessage());\n
      } else {\n
        msg.reply(new JsonArray(res.result()));\n
      }\n
    };\n
  }\n

  private <T> Handler<AsyncResult<Set<T>>> createSetHandler(Message msg) {\n
    return res -> {\n
      if (res.failed()) {\n
        msg.fail(-1, res.cause().getMessage());\n
      } else {\n
        msg.reply(new JsonArray(new ArrayList<>(res.result())));\n
      }\n
    };\n
  }\n

  private Handler<AsyncResult<List<Character>>> createListCharHandler(Message msg) {\n
    return res -> {\n
      if (res.failed()) {\n
        msg.fail(-1, res.cause().getMessage());\n
      } else {\n
        JsonArray arr = new JsonArray();\n
        for (Character chr: res.result()) {\n
          arr.add((int)chr);\n
        }\n
        msg.reply(arr);\n
      }\n
    };\n
  }\n

  private Handler<AsyncResult<Set<Character>>> createSetCharHandler(Message msg) {\n
    return res -> {\n
      if (res.failed()) {\n
        msg.fail(-1, res.cause().getMessage());\n
      } else {\n
        JsonArray arr = new JsonArray();\n
        for (Character chr: res.result()) {\n
          arr.add((int)chr);\n
        }\n
        msg.reply(arr);\n
      }\n
    };\n
  }\n

  private <T> Map<String, T> convertMap(Map map) {\n
    return (Map<String, T>)map;\n
  }\n

  private <T> List<T> convertList(List list) {\n
    return (List<T>)list;\n
  }\n

  private <T> Set<T> convertSet(List list) {\n
    return new HashSet<T>((List<T>)list);\n
  }\n

}

